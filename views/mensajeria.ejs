<h2>Bienvenido <%= username %></h2>
<div class="mensajeria" id="id_mensajeria">
  <div class="chat" id="id_chat">
    <ul id="id_mensaje" class="mensaje">
      <li>mensaje grupal</li>
    </ul>

    <form id="id_form" class="form_class">
      <input
        type="text"
        name="message"
        id="id_input"
        placeholder="Escribe un mensaje"
        autocomplete="off"
      />
      <button type="submit">Enviar</button>
    </form>
  </div>

  <div class="chat_p" id="id_chat">
    <ul id="id_mensaje_p" class="mensaje">
      <li>mensaje privado</li>
    </ul>

    <form id="id_form_p" class="form_class">
      <input
        type="text"
        name="message"
        id="id_input_p"
        placeholder="Escribe un mensaje"
        autocomplete="off"
      />
      <button type="submit">Enviar</button>
    </form>
  </div>

  <div class="usuarios_conectados" id="id_usuarios_conectados">
    <ul id="id_item_usr">
      <li>David</li>
    </ul>
  </div>
</div>

<script type="module">
  //  OBJETOS //
  import { io } from "https://cdn.socket.io/4.7.5/socket.io.esm.min.js";
  const socket = io();

  const chat = document.querySelector(".chat");
  const chat_p = document.querySelector(".chat_p");

  // chat grupal
  const mensajes = document.getElementById("id_mensaje");
  const form = document.getElementById("id_form");
  const msg = document.getElementById("id_input"); // texto a enviar (msg)
  // chat privado
  const mensajes_p = document.getElementById("id_mensaje_p");
  const form_p = document.getElementById("id_form_p");
  const msg_p = document.getElementById("id_input_p");

  const userList = document.getElementById("id_item_usr"); // Lista de usuarios

  ////// CHATS GRUPALES
  // envio info-datta Usuario - Unir el usuario a la room
  socket.emit("unirRoom", { username: `<%= username %>`, room: `<%= room %>` });

  // Recibir usuarios conectados
  socket.on("roomUsers", ({ room, users }) => {
    userList.innerHTML = ""; // Limpiar la lista antes de actualizarla
    users.forEach((user) => {
      const userItem = `<li> <a href=""> <div class="usr" value="${user.username}"> ${user.username} </div> </a> </li>`;
      userList.insertAdjacentHTML("beforeend", userItem);
    });
  });

  // Enviar mensaje
  form.addEventListener("submit", (e) => {
    e.preventDefault();
    if (msg.value.trim()) {
      // Emitir el mensaje al servidor
      socket.emit("chatMessage", msg.value);
      msg.value = ""; // Limpiar el input después de enviar
    }
  });

  // Recibir mensajes del servidor (bot y otros usuarios)
  socket.on("message", ({ username, text, time }) => {
    const item = `<li>${username}: ${text}</li>`;
    mensajes.insertAdjacentHTML("beforeend", item);
  });

  ////// CHATS PRIVADOS
  userList.addEventListener("click", (e) => {
    e.preventDefault();
    if (e.target && e.target.matches("div.usr")) {
      const selectedUser = e.target.innerText.trim(); // Seleccionar usuario
      const room_priv = `<%= username %>` + "-" + selectedUser;

      // Restaurar el color a azul cuando se selecciona el usuario
      e.target.style.backgroundColor = "blue";

      // Ocultar chat grupal y mostrar chat privado
      chat.classList.add("chat_h"); // Ocultar chat grupal
      chat_p.classList.add("chat_ps"); // Mostrar chat privado

      socket.emit("UnirchatPrivado", {
        username: `<%= username %>`,
        person: selectedUser,
        room: "",
        room_p: room_priv,
      });
    }
  });

  form_p.addEventListener("submit", (e) => {
    e.preventDefault();
    if (msg_p.value.trim()) {
      socket.emit("chatMessagePrivado", msg_p.value);
      msg_p.value = "";
    }
  });

  socket.on("message_privad", ({ username, text, time }) => {
    const item = `<li>${username}: ${text}</li>`;
    mensajes_p.insertAdjacentHTML("beforeend", item);
  });

  socket.on("notificacionPrivada", ({ emisor, receptor, mensaje }) => {
    //confirm(`${emisor} ha iniciado un chat privado contigo. ¿Deseas unirte?`);

    // Encontrar el div del usuario que envió la notificación
    const usuarioDiv = document.querySelector(`.usr[value="${emisor}"]`);

    // Cambiar el color a rojo si existe el usuario en la lista
    if (usuarioDiv) {
      usuarioDiv.style.backgroundColor = "red";
    }

    // Al hacer clic en el input de mensajes privados, restaurar el color a azul
    const inputPrivado = document.getElementById("id_input_p");
    inputPrivado.addEventListener("focus", () => {
      if (usuarioDiv) {
        usuarioDiv.style.backgroundColor = "blue";
      }
    });
  });
</script>

<style>
  .mensaje,
  .mensaje_p {
    flex-grow: 1;
    height: 70vh;
    overflow-y: scroll;
    scroll-behavior: smooth;
  }

  .mensaje > li,
  .mensaje_p > li {
    padding: 0.5rem 1rem;
    word-wrap: break-word;
  }

  .mensaje > li:nth-child(odd),
  .mensaje_p > li:nth-child(odd) {
    background: #000;
  }

  .chat,
  .chat_p {
    border-radius: 10px;
    padding: 2px;
    flex-direction: column;
    justify-content: space-between;
    overflow: hidden;
  }
  .chat {
    display: block;
  }
  .chat_h {
    display: none;
  }

  .chat_p {
    display: none;
  }
  .chat_ps {
    display: block;
  }

  .mensajeria {
    display: flex;

    gap: 20px;
  }
  .usuarios_conectados {
    width: 90px;
    text-align: center;
  }
</style>
